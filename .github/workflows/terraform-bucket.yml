name: Terraform S3 Bucket Management
on:
  workflow_dispatch:
    inputs:
      BucketName:
        description: 'Name of the S3 bucket to manage'
        required: true
        type: string
      Region:
        description: 'Region Name'
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - ap-south-1
      ApplicationCI:
        description: 'ApplicationCI name'
        required: true
        type: string
        default: 'myapp'
      env:
        description: 'Environment (dev, qa, stg, prd)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - stg
          - prd
      EnvType:
        description: 'Environment type (primary or secondary or dr)'
        required: true
        type: choice
        options:
          - primary
          - secondary
          - dr
      ActionToTake:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - Plan
          - Apply
          - Destroy

# Add permissions at the workflow level
permissions:
  id-token: write   # Required for AWS credentials configuration :cite[1]:cite[8]
  contents: read    # Required for checking out code

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read bucket configuration from JSON
        id: bucket_config
        run: |
          BUCKET_NAME="${{ github.event.inputs.BucketName }}"
          CONFIG=$(jq -r --arg name "$BUCKET_NAME" '.[$name]' buckets.json)
          if [ "$CONFIG" = "null" ]; then
            echo "Error: Bucket '$BUCKET_NAME' not found in buckets.json"
            exit 1
          fi
          echo "config_json=$(echo $CONFIG | jq -c '.')" >> $GITHUB_OUTPUT

      - name: Generate terraform.tfvars.json
        run: |
          # Create a combined JSON object with inputs and bucket config
          cat > terraform.tfvars.json << EOF
          {
            "BucketName": "${{ github.event.inputs.BucketName }}",
            "ApplicationCI": "${{ github.event.inputs.ApplicationCI }}",
            "env": "${{ github.event.inputs.env }}",
            "EnvType": "${{ github.event.inputs.EnvType }}",
            "Region": "${{ github.event.inputs.Region }}",
            $(echo "${{ steps.bucket_config.outputs.config_json }}" | jq -r 'to_entries | map("\"\(.key)\": \(.value | @json)") | join(",")')
          }
          EOF
          
          echo "Generated terraform.tfvars.json:"
          cat terraform.tfvars.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event.inputs.ActionToTake == 'Plan'
        run: terraform plan -var-file="terraform.tfvars.json"

      - name: Terraform Apply
        if: github.event.inputs.ActionToTake == 'Apply'
        run: terraform apply -auto-approve -var-file="terraform.tfvars.json"

      - name: Terraform Destroy
        if: github.event.inputs.ActionToTake == 'Destroy'
        run: terraform destroy -auto-approve -var-file="terraform.tfvars.json"
